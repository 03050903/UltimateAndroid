{"name":"UltimateAndroid","tagline":"UltimateAndroid is a framework to help developing Android apps in a fast way","body":"UltimateAndroid\r\n==========================\r\n\r\n###Version:0.2.0 beta\r\n\r\n\r\n[![Build Status](https://drone.io/github.com/cymcsg/UltimateAndroid/status.png)](https://drone.io/github.com/cymcsg/UltimateAndroid/latest)\r\n<br>\r\n\r\n###UltimateAndroid is a framework which can help you  develop Android apps  in a fast way  \r\n\r\n\r\n### 快速开发Android应用的框架  \r\n<br>  \r\n[English Introduction](#english_introduction)\r\n\r\n[中文简介](#chinese_introduction)\r\n\r\n[English Tutorials](https://github.com/cymcsg/UltimateAndroid/blob/master/Tutorials/TableofContents_eng.md)\r\n\r\n[中文详细教程](https://github.com/cymcsg/UltimateAndroid/blob/master/Tutorials/TableofContents_zh.md)\r\n\r\n[Ui sample](#demo_of_ui)\r\n\r\n[Ui 效果](#demo_of_ui)\r\n\r\n###Update Ui for Material Design!\r\n\r\n\r\n\r\n[Update Log](https://github.com/cymcsg/UltimateAndroid/blob/master/updateLog.md)\r\n\r\n\r\n\r\n<br>\r\n<h2 ><a name=\"english_introduction\">Introduction</h2>  \r\n\r\n---\r\n\r\n#####The framework contains many features like View Injection,ORM,Asynchronous Networking and Image Loader,User scenario testing,over 100 Ui effects etc.And there are also many useful feature like WebViewUtils,DaoUtils,Https Utils, TripleDes Utils etc.The framework will be added  more feature in the future. \r\n\t\r\n\r\n\t \r\nUp to now,I have only write the demo of most parts of UI modules and View Injection.The demo is something boring,but you can also see many kinds of UI modules.The DemoOfUi's screenshots are below,and you can download the apk directly.\r\n\r\n[Demo of Ui's screenshot is here.](#demo_of_ui)\r\n\t\r\n#####Welcome to fork.\r\n\r\n\r\n\r\n\t\r\nDemo Manual\r\n-----\r\n\r\n\r\n\r\nDemo is rely on appcompat and the UltimateAndroid, you can change CONFIGURATION in your IDES etc.\r\n\r\n###Quick Setup（Basic Usage）\r\n1.If this is the first time for you to use the framework, you can use CommonApplication as your Application of Android app or just let your custom application extends CommonApplication.  \r\n\r\n2.UltimateAndroid  depends on appcompat. UltimateAndroidUi  depends on UltimateAndroid.And the DemoOfUi is depends on UltimateAndroidUi. As the function of View Injection which use ButterKnife,you should config your IDE before you can compile the project.***Most of  IDEs require additional configuration in order to enable annotation processing for Butter Knife,\r\nor you can see [IntelliJ IDEA Configuration for Butter Knife ][101] or [Eclipse Configuration for butter Knife][102].***\r\n\r\n3.View Injection:\r\n  \r\n  ``Example:``\r\n  \r\n \tclass ExampleActivity extends Activity {\r\n  \t@InjectView(R.id.title) TextView title;\r\n  \t@InjectView(R.id.subtitle) TextView subtitle;\r\n  \t@InjectView(R.id.footer) TextView footer;\r\n\r\n  \t@Override public void onCreate(Bundle savedInstanceState) {\r\n    \tsuper.onCreate(savedInstanceState);\r\n    \tsetContentView(R.layout.simple_activity);\r\n    \tButterKnife.inject(this);\r\n    \t// TODO Use \"injected\" views...\r\n  }\r\n}\r\n\r\nAnother use is simplifying the view holder pattern inside of a list adapter.\r\n\r\n\tpublic class MyAdapter extends BaseAdapter {\r\n\t@Override public View getView(int position, View view, ViewGroup parent) {\r\n    \tViewHolder holder;\r\n    \tif (view != null) {\r\n      \tholder = (ViewHolder) view.getTag();\r\n    \t} else {\r\n      \tview = inflater.inflate(R.layout.whatever, parent, false);\r\n      \tholder = new ViewHolder(view);\r\n      \tview.setTag(holder);\r\n    \t}\r\n    \tholder.name.setText(\"John Doe\");\r\n    \t// etc...\r\n    \treturn view;\r\n    \t}\r\n    \tstatic class ViewHolder {\r\n    \t@InjectView(R.id.title) TextView name;\r\n    \t@InjectView(R.id.job_title) TextView jobTitle;\r\n    \tpublic ViewHolder(View view) {\r\n    \tButterKnife.inject(this, view);\r\n      }\r\n      }\r\n\t}\r\n\t\r\n4.Asynchronous Network:\r\n  Use asynchronous utils,you do not need to use an addtional Thread to visit network.\r\n\r\n\tHttpUtilsAsync.get(\"http://www.google.com\", new AsyncHttpResponseHandler() {\r\n\r\n    @Override\r\n    public void onStart() {\r\n        // called before request is started\r\n    }\r\n\r\n    @Override\r\n    public void onSuccess(int statusCode, Header[] headers, byte[] response) {\r\n        // called when response HTTP status is \"200 OK\"\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(int statusCode, Header[] headers, byte[] errorResponse, Throwable e) {\r\n        // called when response HTTP status is \"4XX\" (eg. 401, 403, 404)\r\n    }\r\n\r\n    @Override\r\n    public void onRetry(int retryNo) {\r\n        // called when request is retried\r\n\t}\r\n\t});\r\n\t\r\nPost request:\r\n\t\r\n\tHttpUtilsAsync.post(\"http://www.google.com\", new AsyncHttpResponseHandler() {\r\n\r\n    @Override\r\n    public void onStart() {\r\n        // called before request is started\r\n    }\r\n\r\n    @Override\r\n    public void onSuccess(int statusCode, Header[] headers, byte[] response) {\r\n        // called when response HTTP status is \"200 OK\"\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(int statusCode, Header[] headers, byte[] errorResponse, Throwable e) {\r\n        // called when response HTTP status is \"4XX\" (eg. 401, 403, 404)\r\n    }\r\n\r\n    @Override\r\n    public void onRetry(int retryNo) {\r\n        // called when request is retried\r\n\t}\r\n\t});\r\n\t\r\n5.Display Images:\r\n  If you have already use or extend CommonApplication,you can use like this:\r\n  ```ImageLoader.getInstance().displayImage((imageUri, imageView));```\r\n  \r\n  Or for some advantage usage:\r\n\r\n\r\n\timageLoader.displayImage(imageUri, imageView, displayOptions, new ImageLoadingListener() \t{\r\n\t    @Override\r\n    \tpublic void onLoadingStarted(String imageUri, View view) {\r\n        \t...\r\n    \t}\r\n    \t@Override\r\n    \tpublic void onLoadingFailed(String imageUri, View view, FailReason failReason) {\r\n\t        ...\r\n\t    }\r\n\t    @Override\r\n\t    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\r\n\t    ...\r\n\t    }\r\n\t    @Override\r\n\t    public void onLoadingCancelled(String imageUri, View view) {\r\n\t     ...\r\n\t     }\r\n\t}, new ImageLoadingProgressListener() {\r\n\t @Override\r\n\t public void onProgressUpdate(String imageUri, View view, int current, int total) {\r\n\t ...\r\n\t }\r\n\t});\r\n\t\r\n\t\r\n<br>\r\n\r\n\t// Load image, decode it to Bitmap and return Bitmap to callback\r\n\tImageSize targetSize = new ImageSize(120, 80); // result Bitmap will be fit to this size\r\n\timageLoader.loadImage(imageUri, targetSize, displayOptions, new \tSimpleImageLoadingListener() {\r\n    @Override\r\n    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\r\n        // Do whatever you want with Bitmap\r\n    }\r\n\t});\t\r\n\t\r\n\t\r\nAcceptable URIs examples:\r\n\r\n\tString imageUri = \"http://site.com/image.png\"; // from Web\r\n\tString imageUri = \"file:///mnt/sdcard/image.png\"; // from SD card\r\n\tString imageUri = \"content://media/external/audio/albumart/13\"; // from content provider\r\n\tString imageUri = \"assets://image.png\"; // from assets\r\n\tString imageUri = \"drawable://\" + R.drawable.image; // from drawables (only images, \tnon-9patch)\r\n\t\r\n**NOTE**: Use drawable:// only if you really need it! Always consider the native way to load drawables - ImageView.setImageResource(...) instead of using of ImageLoader.\r\n\r\n\r\n6.ORM:\r\n\r\n The Orm Module of the framework contains both [GreenDao](https://github.com/greenrobot/greenDAO) and [ActiveRecord](https://github.com/pardom/ActiveAndroid).\r\n \r\n You can choose either of them freely.\t\t\t\r\n\r\n\r\nPlease set the ides before you run the demo apps.\r\n\r\n```UltimateAndroid  depends on appcompat.UltimateAndroidUi  depends on UltimateAndroid.And the DemoOfUi is depends on UltimateAndroidUi.```\r\n\r\n```However,if you want to use UltimateAndroid without the UIModules,you can just depend on UltimateAndroid and this will make the app more flexible.```\r\n\r\n##UI Modules\r\n* Support animations for Android 2.3\r\n* EnhanceListView for listview which can swipe to dismiss the item\r\n* Shimmer and Titanic to let the textview more amazing\r\n* SmoothProgressBar to let the progress bar like Gmail or Google +\r\n* Flip View for implementing flipping between views as seen in the popular Flipboard application\r\n* PhotoView to help produce an easily usable implementation of a zooming Android ImageView\r\n* PagerSlidingTabStrip and  ViewPagerIndicator to help customing View Pager more easily.\r\n* SwipeBackLayout to help you finish a activity by swipe the screen.  \r\n  ``And there are also many UI modules which I do not mention here.``  \r\n  \r\n\r\n <h2 ><a name=\"chinese_introduction\"></a>简介</h2>   \r\n\r\n---\r\n####框架目前主要包含的功能有View Injection,ORM,异步网络请求和图片加载，自动化脚本测试,磁盘LRU等功能.同时提供了类似于TripleDes、Webview快速设置、Md5处理、String处理,Https处理等常用工具类，还有超过100多种UI控件效果。并且这些功能正在逐步增加中。\r\n\t\t\r\n欢迎各种fork与提意见。\r\n\r\n如果大家有需要的功能，欢迎随时提意见。\r\n\r\n使用DemoOfUI的时候,需要注意UltimateAndroid 依赖 appcompat.UltimateAndroidUi 依赖 UltimateAndroid.DemoOfUi 依赖 UltimateAndroidUi.如果你不需要使用UiModule的话，可以直接依赖UltimateAndroid，这样体积会更纤细。Demo的Apk文件可以直接下载使用.\r\n\r\n[UI截图在这里](#demo_of_ui)\r\n\r\n\r\n#####Welcome to fork.\r\n\r\n\r\n###QQ交流群：341970175（请注明Android开发）\r\n\r\n\r\n\r\nDemo 使用方法\r\n--------------\r\n\r\nDemo依赖于appcompat 和 UltimateAndroid，你可以在IDE或者配置文件里面添加一下依赖。\r\n\r\n###快速入门（基础使用）\r\n1.如果这是您第一次使用UltimateAndroid，你可以使用CommonApplication作为Android App的Application或者使用自定义的Application继承CommonApplication。\r\n\r\n2.使用DemoOfUI的时候,需要注意UltimateAndroid 依赖 appcompat.UltimateAndroidUi 依赖 UltimateAndroid.DemoOfUi 依赖 UltimateAndroidUi.如果你不需要使用UiModule的话，可以直接依赖UltimateAndroid，这样体积会更纤细。Demo的Apk文件可以直接下载使用.由于框架使用了View Injection，**大部分IDE需要开启annotation的编译（使用了Butter Knife），如果不清楚如何开启可以看一下[IntelliJ IDEA Configuration for Butter Knife ][101] or [Eclipse Configuration for butter Knife][102].**\r\n\r\n3.视图注入：\r\n\r\n Example:\r\n \r\n  \tclass ExampleActivity extends Activity {\r\n  \t@InjectView(R.id.title) TextView title;\r\n  \t@InjectView(R.id.subtitle) TextView subtitle;\r\n  \t@InjectView(R.id.footer) TextView footer;\r\n\r\n  \t@Override public void onCreate(Bundle savedInstanceState) {\r\n    \tsuper.onCreate(savedInstanceState);\r\n    \tsetContentView(R.layout.simple_activity);\r\n    \tButterKnife.inject(this);\r\n    \t// TODO Use \"injected\" views...\r\n      }\r\n    }\r\n\r\nAnother use is simplifying the view holder pattern inside of a list adapter.\r\n\r\n\tpublic class MyAdapter extends BaseAdapter {\r\n\t@Override public View getView(int position, View view, ViewGroup parent) {\r\n    \tViewHolder holder;\r\n    \tif (view != null) {\r\n      \tholder = (ViewHolder) view.getTag();\r\n    \t} else {\r\n      \tview = inflater.inflate(R.layout.whatever, parent, false);\r\n      \tholder = new ViewHolder(view);\r\n      \tview.setTag(holder);\r\n    \t}\r\n    \tholder.name.setText(\"John Doe\");\r\n    \t// etc...\r\n    \treturn view;\r\n    \t}\r\n    \tstatic class ViewHolder {\r\n    \t@InjectView(R.id.title) TextView name;\r\n    \t@InjectView(R.id.job_title) TextView jobTitle;\r\n    \tpublic ViewHolder(View view) {\r\n    \tButterKnife.inject(this, view);\r\n      }\r\n      }\r\n\t}\t\r\n\r\n4.异步网络请求:\r\n  使用异步网络请求工具，你不需要在额外的声明Thread来进行网络请求。\r\n\r\n\tHttpUtilsAsync.get(\"http://www.google.com\", new AsyncHttpResponseHandler() {\r\n\r\n    @Override\r\n    public void onStart() {\r\n        // called before request is started\r\n    }\r\n\r\n    @Override\r\n    public void onSuccess(int statusCode, Header[] headers, byte[] response) {\r\n        // called when response HTTP status is \"200 OK\"\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(int statusCode, Header[] headers, byte[] errorResponse, Throwable e) {\r\n        // called when response HTTP status is \"4XX\" (eg. 401, 403, 404)\r\n    }\r\n\r\n    @Override\r\n    public void onRetry(int retryNo) {\r\n        // called when request is retried\r\n\t}\r\n\t});\r\n\t\r\nPost request:\r\n\t\r\n\tHttpUtilsAsync.post(\"http://www.google.com\", new AsyncHttpResponseHandler() {\r\n\r\n    @Override\r\n    public void onStart() {\r\n        // called before request is started\r\n    }\r\n\r\n    @Override\r\n    public void onSuccess(int statusCode, Header[] headers, byte[] response) {\r\n        // called when response HTTP status is \"200 OK\"\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(int statusCode, Header[] headers, byte[] errorResponse, Throwable e) {\r\n        // called when response HTTP status is \"4XX\" (eg. 401, 403, 404)\r\n    }\r\n\r\n    @Override\r\n    public void onRetry(int retryNo) {\r\n        // called when request is retried\r\n\t}\r\n\t});\r\n\t\r\n5.显示图片:\r\n  如果你已经使用或继承了CommonApplication，你可以如下使用:\r\n  ```ImageLoader.getInstance().displayImage((imageUri, imageView));```\r\n  \r\n  或者高级使用:\r\n\r\n\timageLoader.displayImage(imageUri, imageView, displayOptions, new ImageLoadingListener() \t{\r\n\t    @Override\r\n    \tpublic void onLoadingStarted(String imageUri, View view) {\r\n        \t...\r\n    \t}\r\n    \t@Override\r\n    \tpublic void onLoadingFailed(String imageUri, View view, FailReason failReason) {\r\n\t        ...\r\n\t    }\r\n\t    @Override\r\n\t    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\r\n\t    ...\r\n\t    }\r\n\t    @Override\r\n\t    public void onLoadingCancelled(String imageUri, View view) {\r\n\t     ...\r\n\t     }\r\n\t}, new ImageLoadingProgressListener() {\r\n\t @Override\r\n\t public void onProgressUpdate(String imageUri, View view, int current, int total) {\r\n\t ...\r\n\t }\r\n\t});\r\n\t\r\n<br>\r\n\r\n\t// Load image, decode it to Bitmap and return Bitmap to callback\r\n\tImageSize targetSize = new ImageSize(120, 80); // result Bitmap will be fit to this size\r\n\timageLoader.loadImage(imageUri, targetSize, displayOptions, new \tSimpleImageLoadingListener() {\r\n    @Override\r\n    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\r\n        // Do whatever you want with Bitmap\r\n    }\r\n\t});\t\r\n\t\r\n\t\r\n可以使用的URI格式:\r\n\r\n\tString imageUri = \"http://site.com/image.png\"; // from Web\r\n\tString imageUri = \"file:///mnt/sdcard/image.png\"; // from SD card\r\n\tString imageUri = \"content://media/external/audio/albumart/13\"; // from content provider\r\n\tString imageUri = \"assets://image.png\"; // from assets\r\n\tString imageUri = \"drawable://\" + R.drawable.image; // from drawables (only images, \tnon-9patch)\r\n\t\r\n**NOTE**: Use drawable:// only if you really need it! Always consider the native way to load drawables - ImageView.setImageResource(...) instead of using of ImageLoader.\r\n\r\n\r\n6.ORM:\r\n\r\n Orm模块包括[GreenDao](https://github.com/greenrobot/greenDAO) and [ActiveRecord](https://github.com/pardom/ActiveAndroid).\r\n \r\n 你可以自由选择两者中的一个。\t\t\t\t\t\r\n\r\n\r\n##UI 模块\r\n* 支持Android2.3 上面的动画效果\r\n* Listview的滑动删除\r\n* 动态的textview\r\n* 类似Gmail和Google+的进度条\r\n* 类似FlipBoard的翻页效果\r\n* 放大缩写图片的模块\r\n* 影视效果的图片\r\n* 更方便的定制ViewPager\r\n* 滑动后退\r\n\r\n  ``还有许多其他模块没有提到``  \r\n\r\n\r\n\r\n\r\n\r\n<h2 ><a name=\"demo_of_ui\">Some  Demo of Ui:</h2>  \r\n\r\n![tutorials2](http://blog.marshalchen.com/images/tutorial2-12.gif)\r\n\r\n\r\n![tutorials2](http://blog.marshalchen.com/images/tutorial2-1.gif)\r\n\r\n![tutorials2](http://blog.marshalchen.com/images/tutorial2-2.gif)\r\n\r\n![tutorials2](http://blog.marshalchen.com/images/tutorial2-3.gif)\r\n\r\n![tutorials2](http://blog.marshalchen.com/images/tutorial2-4.gif)\r\n\r\n![tutorials2](http://blog.marshalchen.com/images/tutorial2-5.gif)\r\n\r\n![tutorials2](http://blog.marshalchen.com/images/tutorial2-6.gif)\r\n\r\n![tutorials2](http://blog.marshalchen.com/images/tutorial2-7.gif)\r\n\r\n![tutorials2](http://blog.marshalchen.com/images/tutorial2-8.gif)\r\n\r\n![tutorials2](http://blog.marshalchen.com/images/tutorial2-9.gif)\r\n\r\n![tutorials2](http://blog.marshalchen.com/images/tutorial2-10.gif)\r\n\r\n![tutorials2](http://blog.marshalchen.com/images/tutorial2-11.gif)\r\n\r\n\r\n\r\nThe UltimateAndroid use many opensource program and I am very grateful to the author of them.\r\nThe opensource program which I use:\r\n\r\n1.JakeWharton's [Butter Knife][1] for View Injection.\r\n\r\n2.loopj's [Asynchronous Http Client for Android][2].\r\n\r\n3.nostra13's [Universal Image Loader for Android][3]\r\n\r\n4.greenrobot's [greenDAO][4]\r\n\r\n5.pardom's [ActiveAndroid][5]\r\n\r\n6.JakeWharton's [DiskLruCache][6]\r\n\r\n7.Issacw0ng's [SwipeBackLayout][7]\r\n\r\n8.[google-gson][8]\r\n\r\n9.RobotiumTech's [robotium][9]\r\n\r\n10.JakeWharton's [NineOldAndroids][10]\r\n\r\n11.JakeWharton's [Android-ViewPagerIndicator][11]\r\n\r\n12.[RippleEffect](https://github.com/traex/RippleEffect)\r\n\r\n13.[Material Menu](https://github.com/balysv/material-menu)\r\n\r\n14.[FloatingActionButton](https://github.com/futuresimple/android-floating-action-button)\t\t   \r\n15.[FloatingActionButtonWithListView](https://github.com/makovkastar/FloatingActionButton)\r\n\r\n16. [Android View Animations](https://github.com/daimajia/AndroidViewAnimations)\r\n\r\n17.[Trinea](https://github.com/Trinea/android-common)\r\n\r\n18.[ListviewAnimations](https://github.com/nhaarman/ListViewAnimations)\r\n\r\n19.[PagerSlidingTabStrip](https://github.com/astuetz/PagerSlidingTabStrip)\r\n\r\n20.[Rebound](https://github.com/facebook/rebound)\r\n\r\n21. [Titanic](https://github.com/RomainPiel/Titanic)\r\n\r\n22.[FaceCrop](https://github.com/Todd-Davies/ProgressWheel)  \r\n\r\n23.[KenBurns](https://github.com/flavioarfaria/KenBurnsView)  \r\n\r\nThere are some other projects which I write in [Update Log](https://github.com/cymcsg/UltimateAndroid/blob/master/updateLog.md).\r\n\r\n\r\nIf there's anything I forgot to mention,I would be very appreciated for helping me notice it.\r\n\r\n\r\n\r\n\r\n\r\nLicense\r\n--------\r\n\r\n    Copyright 2014 Marshal Chen\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n [1]: https://github.com/JakeWharton/butterknife\r\n [2]: https://github.com/loopj/android-async-http\r\n [3]: https://github.com/nostra13/Android-Universal-Image-Loader\r\n [4]: https://github.com/greenrobot/greenDAO\r\n [5]: https://github.com/pardom/ActiveAndroid\r\n [6]: https://github.com/JakeWharton/DiskLruCache\r\n [7]: https://github.com/Issacw0ng/SwipeBackLayout\r\n [8]: https://code.google.com/p/google-gson/\r\n [9]: https://github.com/RobotiumTech/robotium\r\n [10]:https://github.com/JakeWharton/NineOldAndroids\r\n [11]:https://github.com/JakeWharton/Android-ViewPagerIndicator\r\n [12]:https://github.com/RomainPiel/Shimmer-android\r\n [101]:http://jakewharton.github.io/butterknife/ide-idea.html\r\n [102]:http://jakewharton.github.io/butterknife/ide-eclipse.html\r\n [13]:https://github.com/moagrius/TileView/tree/master\r\n=======\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      \r\n      \r\n\t\r\n\t\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}